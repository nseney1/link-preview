{"version":3,"file":"link-preview.umd.min.js","sources":["../../tmp/module/service/mat-link-preview.service.ts","../../tmp/module/directives/mat-link-preview.directive.ts","../../tmp/module/components/mat-link-preview/mat-link-preview.component.ts","../../tmp/module/components/mat-link-preview-container/mat-link-preview-container.component.ts","../../tmp/module/mat-link-preview.module.ts"],"sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../..';\n\n@Injectable()\nexport class MatLinkPreviewService {\n\n  private _accessKey = '';\n  private _apiURL = 'https://api.linkpreview.net/';\n\n  onLinkFound: EventEmitter<Array<Link>> = new EventEmitter<Array<Link>>();\n\n  links: Link[] = [];\n\n  constructor(private http: HttpClient) {\n    this.onLinkFound.subscribe((links: Array<Link>) => this.links = links);\n  }\n\n  setAccessKey(accessKey: string) {\n    this._accessKey = accessKey;\n  }\n\n  fetchLink(url: string): Observable<LinkPreview> {\n    const body = { key: this._accessKey, q: url };\n\n    return this.http.post(this._apiURL, body).pipe(map(value => value as LinkPreview));\n  }\n}\n","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\nimport {Link, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../module/service/mat-link-preview.service';\n\n@Directive({\n  selector: '[matLinkPreview]',\n  exportAs: '[matLinkPreview]',\n})\nexport class MatLinkPreviewDirective implements OnInit  {\n\n  constructor(public linkifyService: NgxLinkifyjsService,\n              public linkPreviewService: MatLinkPreviewService,\n              private _elemRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this._elemRef.nativeElement.oninput = (inputEvent: any) => {\n      setTimeout( () => {\n        const data = inputEvent.target.value;\n        const links: Link[] = this.linkifyService.find(data);\n        this.linkPreviewService.onLinkFound.emit(links);\n      }, 2000)\n    };\n  }\n\n}\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs/internal/Subscription';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../../interfaces/linkpreview.interface';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview',\n  exportAs: 'matLinkPreview',\n  template: `\n    <ng-container *ngIf=\"!this.linkPreview && !this.loaded && this.showLoadingsProgress;then fetch else preview\">\n    </ng-container>\n    <ng-template #preview>\n      <mat-card *ngIf=\"this.linkPreview\">\n        <mat-card-content class=\"cut-text\">\n          <div class=\"img-container\" *ngIf=\"linkPreview.image\">\n            <img mat-card-image [src]=\"linkPreview?.image\">\n          </div>\n          <div>\n            <mat-card-title>{{linkPreview?.title}}</mat-card-title>\n            <mat-card-subtitle>{{linkPreview?.description}}</mat-card-subtitle>\n            <a [href]=\"linkPreview?.url\" mat-button [color]=\"color\">{{linkPreview?.url}}</a>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n\n    <ng-template #fetch>\n      <mat-spinner *ngIf=\"!this.hasError\"></mat-spinner>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}mat-card-content{flex-direction:row;box-sizing:border-box;display:flex}mat-card-content a{padding-left:0;padding-right:0}.img-container{margin-right:1rem;place-content:center;align-items:center;flex-direction:row;box-sizing:border-box;display:flex;flex:1 1 100%;max-width:20%;padding:24px 16px}.center-auto{margin-left:auto!important;margin-right:auto!important}.cut-text{text-overflow:ellipsis;overflow:hidden}\n  `]\n})\nexport class MatLinkPreviewComponent implements OnInit, OnDestroy {\n\n  @Input() link: Link;\n  @Input() linkPreview: LinkPreview;\n\n  // forwarded from the container\n  @Input() color = 'primary'; // accent | warn\n  @Input() showLoadingsProgress = true;\n\n  loaded: boolean;\n  hasError: boolean;\n  private _subscription: Subscription;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  ngOnInit(): void {\n    if (this.link && !this.linkPreview) {\n      // this.loaded = false;\n      this._subscription = this.linkPreviewService\n        .fetchLink(this.link.href)\n        .subscribe(value => this.linkPreview = value,\n          error => this.hasError = true,\n          () => this.loaded = true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {Link} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview-container',\n  exportAs: 'matLinkPreviewContainer',\n  template: `\n    <ng-container *ngIf=\"!multiple && linkPreviewService.links.length > 0; then first else list\"></ng-container>\n\n    <ng-template #first>\n      <mat-link-preview [link]=\"linkPreviewService?.links[0]\"\n                        [showLoadingsProgress]=\"showLoadingsProgress\">\n      </mat-link-preview>\n    </ng-template>\n    <ng-template #list>\n      <div *ngFor=\"let link of linkPreviewService.links; trackBy: trackLinks\">\n        <mat-link-preview [link]=\"link\"\n                          [showLoadingsProgress]=\"showLoadingsProgress\">\n        </mat-link-preview>\n      </div>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}\n  `]\n})\nexport class MatLinkPreviewContainerComponent {\n\n  // to forward\n  @Input() color = 'primary'; // accent | warn\n  @Input() multiple: boolean;\n  @Input() showLoadingsProgress = true;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  trackLinks(index: number, link: Link) {\n    return link ? link.href : undefined;\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MatLinkPreviewService} from './service/mat-link-preview.service';\nimport {DEFAULT_CONFIG, NgxLinkifyjsConfigToken, NgxLinkifyjsModule, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MatButtonModule, MatCardModule, MatProgressSpinnerModule} from '@angular/material';\nimport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nimport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nimport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\n\n// Export module's public API\nexport {LinkPreview} from './interfaces/linkpreview.interface'\nexport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nexport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\nexport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nexport {MatLinkPreviewService} from './service/mat-link-preview.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    NgxLinkifyjsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective],\n  declarations: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective]\n})\nexport class MatLinkPreviewModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatLinkPreviewModule,\n      providers: [\n        MatLinkPreviewService,\n        NgxLinkifyjsService,\n        {\n          provide: NgxLinkifyjsConfigToken,\n          useValue: DEFAULT_CONFIG\n        }]\n    };\n  }\n}\n"],"names":["http","this","EventEmitter","onLinkFound","subscribe","links","_this","MatLinkPreviewService","accessKey","_accessKey","url","body","key","q","post","_apiURL","pipe","map","value","Injectable","HttpClient","linkifyService","linkPreviewService","_elemRef","MatLinkPreviewDirective","nativeElement","oninput","inputEvent","setTimeout","data","target","find","emit","Directive","selector","exportAs","NgxLinkifyjsService","ElementRef","MatLinkPreviewComponent","link","linkPreview","_subscription","fetchLink","href","error","hasError","loaded","unsubscribe","Component","template","styles","Input","MatLinkPreviewContainerComponent","index","undefined","MatLinkPreviewModule","ngModule","providers","provide","NgxLinkifyjsConfigToken","useValue","DEFAULT_CONFIG","NgModule","imports","CommonModule","HttpClientModule","NgxLinkifyjsModule","MatCardModule","MatButtonModule","MatProgressSpinnerModule","exports","declarations"],"mappings":"gmBAiBE,WAAoBA,GAApB,WAAoBC,UAAAD,EAPZC,gBAAa,GACbA,aAAU,+BAElBA,iBAAyC,IAAIC,eAE7CD,cAGEA,KAAKE,YAAYC,UAAU,SAACC,GAAuB,OAAAC,EAAKD,MAAQA,IAYpE,OATEE,yBAAA,SAAaC,GACXP,KAAKQ,WAAaD,GAGpBD,sBAAA,SAAUG,OACFC,GAASC,IAAKX,KAAKQ,WAAYI,EAAGH,GAExC,OAAOT,KAAKD,KAAKc,KAAKb,KAAKc,QAASJ,GAAMK,KAAKC,MAAI,SAAAC,oCArBtDC,wDANOC,kCCSN,WAAmBC,EACAC,EACCC,GAFDtB,oBAAAoB,EACApB,wBAAAqB,EACCrB,cAAAsB,EAatB,OAVEC,qBAAA,WAAA,WACEvB,KAAKsB,SAASE,cAAcC,QAAU,SAACC,GACrCC,WAAY,eACJC,EAAOF,EAAWG,OAAOZ,MACzBb,EAAgBC,EAAKe,eAAeU,KAAKF,GAC/CvB,EAAKgB,mBAAmBnB,YAAY6B,KAAK3B,IACxC,2BAjBR4B,mBACCC,SAAU,mBACVC,SAAU,gEALEC,6BACN7B,SAFW8B,kCCgDjB,WAAmBf,GAAArB,wBAAAqB,EAPVrB,WAAQ,UACRA,2BAAuB,EA0BlC,OAjBEqC,qBAAA,WAAA,WACMrC,KAAKsC,OAAStC,KAAKuC,cAErBvC,KAAKwC,cAAgBxC,KAAKqB,mBACvBoB,UAAUzC,KAAKsC,KAAKI,MACpBvC,UAAU,SAAAc,GAAS,OAAAZ,EAAKkC,YAActB,GACrC,SAAA0B,GAAS,OAAAtC,EAAKuC,UAAW,GACzB,WAAM,OAAAvC,EAAKwC,QAAS,MAI5BR,wBAAA,WACMrC,KAAKwC,eACPxC,KAAKwC,cAAcM,mCA1DxBC,mBACCd,SAAU,mBACVC,SAAU,iBACVc,SAAU,w1BAsBVC,QAAS,0eA3BH3C,mCAiCL4C,6BACAA,uBAGAA,sCACAA,6BCRD,WAAmB7B,GAAArB,wBAAAqB,EAJVrB,WAAQ,UAERA,2BAAuB,EAQlC,OAHEmD,uBAAA,SAAWC,EAAed,GACxB,OAAOA,EAAOA,EAAKI,UAAOW,uBAlC7BN,mBACCd,SAAU,6BACVC,SAAU,0BACVc,SAAU,smBAgBVC,QAAS,+EArBH3C,oCA4BL4C,0BACAA,sCACAA,6BCbH,cAyBA,OAZSI,UAAP,WACE,OACEC,SAAUD,EACVE,WACElD,EACA6B,uBAEEsB,QAASC,0BACTC,SAAUC,yCArBnBC,kBACCC,SACEC,eACAC,mBACAC,qBACAC,gBACAC,kBACAC,4BAEFC,SAAUhC,EAAyBc,EAAkC5B,GACrE+C,cAAejC,EAAyBc,EAAkC5B"}