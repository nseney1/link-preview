{"version":3,"file":"link-preview.js","sources":["../../tmp/module/service/mat-link-preview.service.ts","../../tmp/module/directives/mat-link-preview.directive.ts","../../tmp/module/components/mat-link-preview/mat-link-preview.component.ts","../../tmp/module/components/mat-link-preview-container/mat-link-preview-container.component.ts","../../tmp/module/mat-link-preview.module.ts"],"sourcesContent":["import {EventEmitter, Injectable} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../..';\n\n@Injectable()\nexport class MatLinkPreviewService {\n\n  private _accessKey = '';\n  private _apiURL = 'https://api.linkpreview.net/';\n\n  onLinkFound: EventEmitter<Array<Link>> = new EventEmitter<Array<Link>>();\n\n  links: Link[] = [];\n\n  constructor(private http: HttpClient) {\n    this.onLinkFound.subscribe((links: Array<Link>) => this.links = links);\n  }\n\n  setAccessKey(accessKey: string) {\n    this._accessKey = accessKey;\n  }\n\n  fetchLink(url: string): Observable<LinkPreview> {\n    const body = { key: this._accessKey, q: url };\n\n    return this.http.post(this._apiURL, body).pipe(map(value => value as LinkPreview));\n  }\n}\n","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\nimport {Link, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../module/service/mat-link-preview.service';\n\n@Directive({\n  selector: '[matLinkPreview]',\n  exportAs: '[matLinkPreview]',\n})\nexport class MatLinkPreviewDirective implements OnInit  {\n\n  constructor(public linkifyService: NgxLinkifyjsService,\n              public linkPreviewService: MatLinkPreviewService,\n              private _elemRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this._elemRef.nativeElement.oninput = (inputEvent: any) => {\n      setTimeout( () => {\n        const data = inputEvent.target.value;\n        const links: Link[] = this.linkifyService.find(data);\n        this.linkPreviewService.onLinkFound.emit(links);\n      }, 2000)\n    };\n  }\n\n}\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs/internal/Subscription';\nimport {Link} from 'ngx-linkifyjs';\nimport {LinkPreview} from '../../interfaces/linkpreview.interface';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview',\n  exportAs: 'matLinkPreview',\n  template: `\n    <ng-container *ngIf=\"!this.linkPreview && !this.loaded && this.showLoadingsProgress;then fetch else preview\">\n    </ng-container>\n    <ng-template #preview>\n      <mat-card *ngIf=\"this.linkPreview\">\n        <mat-card-content class=\"cut-text\">\n          <div class=\"img-container\" *ngIf=\"linkPreview.image\">\n            <img mat-card-image [src]=\"linkPreview?.image\">\n          </div>\n          <div>\n            <mat-card-title>{{linkPreview?.title}}</mat-card-title>\n            <mat-card-subtitle>{{linkPreview?.description}}</mat-card-subtitle>\n            <a [href]=\"linkPreview?.url\" mat-button [color]=\"color\">{{linkPreview?.url}}</a>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n\n    <ng-template #fetch>\n      <mat-spinner *ngIf=\"!this.hasError\"></mat-spinner>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}mat-card-content{flex-direction:row;box-sizing:border-box;display:flex}mat-card-content a{padding-left:0;padding-right:0}.img-container{margin-right:1rem;place-content:center;align-items:center;flex-direction:row;box-sizing:border-box;display:flex;flex:1 1 100%;max-width:20%;padding:24px 16px}.center-auto{margin-left:auto!important;margin-right:auto!important}.cut-text{text-overflow:ellipsis;overflow:hidden}\n  `]\n})\nexport class MatLinkPreviewComponent implements OnInit, OnDestroy {\n\n  @Input() link: Link;\n  @Input() linkPreview: LinkPreview;\n\n  // forwarded from the container\n  @Input() color = 'primary'; // accent | warn\n  @Input() showLoadingsProgress = true;\n\n  loaded: boolean;\n  hasError: boolean;\n  private _subscription: Subscription;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  ngOnInit(): void {\n    if (this.link && !this.linkPreview) {\n      // this.loaded = false;\n      this._subscription = this.linkPreviewService\n        .fetchLink(this.link.href)\n        .subscribe(value => this.linkPreview = value,\n          error => this.hasError = true,\n          () => this.loaded = true);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {Link} from 'ngx-linkifyjs';\nimport {MatLinkPreviewService} from '../../service/mat-link-preview.service';\n\n@Component({\n  selector: 'mat-link-preview-container',\n  exportAs: 'matLinkPreviewContainer',\n  template: `\n    <ng-container *ngIf=\"!multiple && linkPreviewService.links.length > 0; then first else list\"></ng-container>\n\n    <ng-template #first>\n      <mat-link-preview [link]=\"linkPreviewService?.links[0]\"\n                        [showLoadingsProgress]=\"showLoadingsProgress\">\n      </mat-link-preview>\n    </ng-template>\n    <ng-template #list>\n      <div *ngFor=\"let link of linkPreviewService.links; trackBy: trackLinks\">\n        <mat-link-preview [link]=\"link\"\n                          [showLoadingsProgress]=\"showLoadingsProgress\">\n        </mat-link-preview>\n      </div>\n    </ng-template>\n  `,\n  styles: [`\n    :host{display:block}\n  `]\n})\nexport class MatLinkPreviewContainerComponent {\n\n  // to forward\n  @Input() color = 'primary'; // accent | warn\n  @Input() multiple: boolean;\n  @Input() showLoadingsProgress = true;\n\n  constructor(public linkPreviewService: MatLinkPreviewService) {\n  }\n\n  trackLinks(index: number, link: Link) {\n    return link ? link.href : undefined;\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {MatLinkPreviewService} from './service/mat-link-preview.service';\nimport {DEFAULT_CONFIG, NgxLinkifyjsConfigToken, NgxLinkifyjsModule, NgxLinkifyjsService} from 'ngx-linkifyjs';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MatButtonModule, MatCardModule, MatProgressSpinnerModule} from '@angular/material';\nimport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nimport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nimport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\n\n// Export module's public API\nexport {LinkPreview} from './interfaces/linkpreview.interface'\nexport {MatLinkPreviewComponent} from './components/mat-link-preview/mat-link-preview.component';\nexport {MatLinkPreviewContainerComponent} from './components/mat-link-preview-container/mat-link-preview-container.component';\nexport {MatLinkPreviewDirective} from './directives/mat-link-preview.directive';\nexport {MatLinkPreviewService} from './service/mat-link-preview.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    NgxLinkifyjsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective],\n  declarations: [MatLinkPreviewComponent, MatLinkPreviewContainerComponent, MatLinkPreviewDirective]\n})\nexport class MatLinkPreviewModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatLinkPreviewModule,\n      providers: [\n        MatLinkPreviewService,\n        NgxLinkifyjsService,\n        {\n          provide: NgxLinkifyjsConfigToken,\n          useValue: DEFAULT_CONFIG\n        }]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}